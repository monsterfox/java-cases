<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.foxbill.mapper.StudentMapper">

    <select id="queryStudent0" resultType="student">
        select * from student where name = #{name} and age = #{age}
    </select>
     <!--
        1.<if>

        问题：如果在映射文件中只用if,在没有设置name时，拼接的sql会有错
            或者，在同时没有设置name和age时，也会报错
    -->
    <select id="queryStudent1" resultType="student">
        select * from student where
        <if test="name != null and '' != name">
            name = #{name}
        </if>
        <if test="age != null and '' != age">
            and age = #{age}
        </if>
    </select>

    <!--
        2.<where>

        通过<where>和<if>的组合，可以解决上一种情况的问题
    -->
    <select id="queryStudent2" resultType="student">
        select * from student
            <where>
                <if test="null != name and '' != name">
                    and name = #{name}
                </if>
                <if test="null != age and '' != age">
                    and age = #{age}
                </if>
            </where>
    </select>

    <!--
        3.<set>
        问题：只能修改一个属性，如果要修改多个属性，则会出现SQL拼接错误
    -->
    <update id="updateStudent1">
        update student
        <set>
            <if test="null != name and '' != name">
                name = #{name}
            </if>
            <if test="null != age and '' != age">
                age = #{age}
            </if>
        </set>
        where id = #{id}
    </update>

    <!--
        4.<trim>元素模拟<set>元素
        用<trim>可以解决<set>上面的问题
    -->
    <update id="updateStudent2">
        update student
        <trim prefix="set" suffixOverrides=",">
            <if test="null != name and '' != name">
                name = #{name},
            </if>
            <if test="null != age and '' != age">
                age = #{age},
            </if>
        </trim>
        where id = #{id}
    </update>

    <!--
        5.<trim>元素模拟<where>元素
    -->
    <select id="queryStudent3" resultType="student">
        select * from student
        <trim prefix="where" prefixOverrides="and">
            <if test="null != name and '' != name">
                and name = #{name}
            </if>
            <if test="null != age and '' != age">
                and age = #{age}
            </if>
        </trim>
    </select>

    <!--
        6.<choose>、<when>、<otherwise>元素

        <choose>元素表示选择拼接其中一段代码，其中需要使用<when>元素判断是否拼接此段代码，从上至下，只要有一个<when>元素符合条件，便拼接此段代码，退出<choose>元素；当所有<when>元素都不符合条件时，拼接<otherwise>元素中的代码。
    -->
    <select id="queryStudent4" resultType="student">
        select * from student
        <where>
            <choose>
                <when test="null != name and '' != name">
                    and name = #{name}
                </when>
                <when test="null != age and '' != age">
                    and age = #{age}
                </when>
                <otherwise>
                    and id = #{id}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--
        7.<foreach>元素
    -->
    <select id="queryStudentForEach" resultType="student">
        select * from student where id in 
        <foreach collection="idList" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </select>

    <!--
        8.<bind>
        <bind>元素为命名元素，它可以创建一个变量井将其绑定到上下文中，方便后续重复使用
    -->
    <select id="queryStudentBind" resultType="student">
        <bind name="bindName" value="'%'+name+'%'"/>
        select * from student
        <if test="null != name">
            <!--相当于where name like '%'+#{name}+'%'-->
            where name like #{bindName}
        </if>
    </select>
</mapper>